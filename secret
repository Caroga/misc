#!/usr/bin/env bash

# Defaults
secret_file="$HOME/.secret.gpg"
secret_rcp='fbt@fleshless.org'
clipboard_delay='5'

# History
HISTFILE="$HOME/.secret_history"
HISTCONTROL='ignoreboth'

err() { printf "$*" >&2; }
_cat() { while read; do printf '%s\n' "$REPLY"; done; }

secret.help() {
	_cat <<- EOF
		g|get <tag>       # Get a password into your clipboard.
		s|search [regex]  # Search your tags. Lists everything without a regex.
		l|list [regex]    # Same as search.
		c|clear           # Clear the terminal.
		h|?|help          # Show this message.

		If you have any suggestions, refer to the following image:
		https://zfh.so/s/gc5LG
	EOF
}

secret.get_data() {
	declare i tag username password comment

	for i in "${secret_data[@]}"; do
		read -r tag username password comment <<< "$i"

		[[ "$tag" == "$1" ]] && {
			(( flag_quiet )) || {
				printf '%s (%s):\n  username: %s\n' "$tag" "$comment" "$username"
			}

			if (( flag_print )); then
				if (( flag_quiet )); then
					printf '%s' "$password"
				else
					printf '  password: %s\n' "$password"
				fi
			else
				printf '%s' "$password" | xclip
				xclip -o | xclip -selection clipboard

				( 
					sleep "$clipboard_delay"
					xclip < /dev/null; xclip -selection clipboard < /dev/null
				) &
			fi
		}
	done
}

secret.search() {
	declare i tag username password comment pattern

	pattern="$1"

	for i in "${secret_data[@]}"; do
		read -r tag username password comment <<< "$i"

		[[ "$tag" =~ $pattern || "$comment" =~ $pattern ]] && {
			printf '%s (%s):\n  username: %s\n' "$tag" "$comment" "$username"
		}
	done
}

secret.clear() {
	clear
	printf 'A simple password manager.\nType “help” for the list of commands.\n'
}

secret.shell() {
	declare cmd args last_args last_cmd err

	while read -e -r -p 'secret> ' cmd args; do
		history -s "$cmd $args"

		case "$cmd" in
			(g|get) secret.get_data $args;;
			(l|list) secret.search;;
			(s|search) secret.search "$args";;
			(c|clear) secret.clear;;
			(q|quit) exit 0;;
			(h|?|help) secret.help;;
			('') :;;
			(*) err 'Unknown command!\n';;
		esac
	done

	printf '\n'
}

set_argv() {
	declare arg opt c
	declare -g argv

	while (( $# )); do
		unset -v arg opt c

		case "$1" in
			(--) argv+=( "$1" ); break;;

			(--*)
				IFS='=' read arg opt <<< "$1"
				argv+=( "$arg" )

				[[ "$opt" ]] && {
					argv+=( "$opt" )
				}
			;;

			(-*)
				while read -n1 c
				do
					case "$c" in
						-|'') :;;
						*) argv+=( "-$c" );;
					esac
				done <<< "$1"
			;;

			(*) argv+=( "$1" );;
		esac
		shift
	done
}

cleanup() {
	history -w
}

main() {
	trap 'cleanup' INT TERM EXIT

	while (( $# )); do
		case "$1" in
			--help|-h) usage; return 0;;

			--quiet|-q) flag_quiet=1;;
			--print|-p) flag_print=1;;
			--file|-f) secret_file="$2"; shift;;

			--) shift; break;;
			-*)
				err "Unknown key: ${1}\n"
				usage
				return 1
			;;

			*) break;;
		esac
		shift
	done

	[[ -f "$HOME/.config/secretrc" ]] && {
		source "$HOME/.config/secretrc" || {
			return "$?"
		}
	}

	history -r

	while read -r; do
		secret_data+=( "$REPLY" )
	done < <( gpg -q -d "$secret_file" )

	if (( $# )); then
		action="$1"
		shift

		case "$action" in
			(g|get) secret.get_data "$@";;
			(l|list) secret.search;;
			(s|search) secret.search "$@";;
			(h|?|help) secret.help;;
		esac
	else
		secret.clear
		secret.shell
	fi
}

set_argv "$@"
main "${argv[@]}"
